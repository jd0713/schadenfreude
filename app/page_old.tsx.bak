'use client';

import { useEffect, useState } from 'react';
import useSWR from 'swr';
import StatsOverview from '@/components/StatsOverview';
import PositionFilters from '@/components/PositionFilters';
import PositionsTable from '@/components/PositionsTable';
import FunkyPositionCard from '@/components/FunkyPositionCard';
import { Position } from '@/lib/types';
import { Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { motion } from 'framer-motion';

const fetcher = (url: string) => fetch(url).then((res) => res.json());

export default function Home() {
  const [isManualRefreshing, setIsManualRefreshing] = useState(false);
  const [selectedRiskFilter, setSelectedRiskFilter] = useState<string | null>(null);
  const [showHighRiskOnly, setShowHighRiskOnly] = useState(true);
  const [selectedSizeCategory, setSelectedSizeCategory] = useState<'all' | 'whale' | 'dolphin' | 'shrimp'>('all');
  const [currentTime, setCurrentTime] = useState<string>('');

  // Build query string
  const queryParams = new URLSearchParams();
  if (selectedRiskFilter) queryParams.set('riskLevel', selectedRiskFilter);
  const queryString = queryParams.toString();
  const apiUrl = `/api/positions${queryString ? `?${queryString}` : ''}`;

  // Fetch positions with SWR for caching and auto-refresh
  const { data, error, mutate, isLoading } = useSWR(apiUrl, fetcher, {
    refreshInterval: 30000, // Auto-refresh every 30 seconds
    revalidateOnFocus: true,
  });

  let positions: Position[] = data?.data || [];
  
  // Apply client-side filtering
  if (showHighRiskOnly) {
    positions = positions.filter(p => 
      (p.liquidationDistance && p.liquidationDistance < 10) || 
      p.positionValue > 100000
    );
  }
  
  // Apply size category filter
  if (selectedSizeCategory !== 'all') {
    positions = positions.filter(p => {
      if (selectedSizeCategory === 'whale') return p.positionValue > 1000000;
      if (selectedSizeCategory === 'dolphin') return p.positionValue >= 100000 && p.positionValue <= 1000000;
      if (selectedSizeCategory === 'shrimp') return p.positionValue < 100000;
      return true;
    });
  }

  // Calculate stats
  const stats = {
    totalPositions: positions.length,
    totalValue: positions.reduce((acc, p) => acc + (p.positionValue || 0), 0),
    totalPnL: positions.reduce((acc, p) => acc + (p.unrealizedPnl || 0), 0),
    criticalCount: positions.filter(p => p.riskLevel === 'critical').length,
    dangerCount: positions.filter(p => p.riskLevel === 'danger').length,
    profitingCount: positions.filter(p => p.unrealizedPnl > 0).length,
  };

  // Manual refresh handler
  const handleRefresh = async () => {
    setIsManualRefreshing(true);

    // Trigger sync first
    try {
      await fetch('/api/sync', { method: 'POST' });
    } catch (err) {
      console.error('Sync failed:', err);
    }

    // Then refresh data
    await mutate();
    setIsManualRefreshing(false);
  };

  // Initial sync on mount and setup time
  useEffect(() => {
    fetch('/api/sync', { method: 'POST' }).catch(console.error);

    // Set initial time
    setCurrentTime(new Date().toLocaleTimeString());

    // Update time every second
    const timer = setInterval(() => {
      setCurrentTime(new Date().toLocaleTimeString());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  const formatLargeUSD = (num: number | null | undefined) => {
    if (num === null || num === undefined) return '$0';
    const absNum = Math.abs(num);
    if (absNum >= 1000000) return `$${(num / 1000000).toFixed(2)}M`;
    if (absNum >= 1000) return `$${(num / 1000).toFixed(1)}K`;
    return `$${num.toFixed(2)}`;
  };

  return (
    <main className="min-h-screen bg-[#1D1D1D]">
      <div className="container mx-auto px-4 py-6">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-6 border-b border-gray-700 pb-6"
        >
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-pixelify font-bold text-[#97FCE4] mb-1 tracking-wider">
                SCHADENFREUDE
              </h1>
              <p className="text-gray-400 text-base font-ibm uppercase tracking-wide">
                HYPERLIQUID POSITION MONITOR
              </p>
            </div>
            <div className="flex items-center gap-4">
              <div className="text-right">
                <p className="text-sm text-gray-500 font-ibm uppercase tracking-wide">LAST UPDATED</p>
                <p className="text-base text-gray-300 font-ibm">{currentTime || '--:--:--'}</p>
              </div>
            </div>
          </div>
        </motion.div>

        {/* Stats Dashboard */}
        {!isLoading && !error && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5 }}
            className="mb-6 grid grid-cols-2 md:grid-cols-6 gap-4"
          >
            <div className="bg-[#1a1a1a] rounded-xl p-6 border border-[#333] shadow-lg hover:shadow-xl transition-all hover:border-[#444]">
              <p className="text-sm text-[#a3a3a3] mb-3 font-ibm uppercase tracking-wider">POSITIONS</p>
              <p className="text-3xl font-pixelify font-bold text-white">{stats.totalPositions}</p>
            </div>
            <div className="bg-[#1a1a1a] rounded-xl p-6 border border-[#333] shadow-lg hover:shadow-xl transition-all hover:border-[#444]">
              <p className="text-sm text-[#a3a3a3] mb-3 font-ibm uppercase tracking-wider">TOTAL VALUE</p>
              <p className="text-3xl font-pixelify font-bold text-white">{formatLargeUSD(stats.totalValue)}</p>
            </div>
            <div className={`bg-[#1a1a1a] rounded-xl p-6 border shadow-lg hover:shadow-xl transition-all ${stats.totalPnL >= 0 ? 'border-[#00C950]/30 hover:border-[#00C950]/50' : 'border-[#FB2C36]/30 hover:border-[#FB2C36]/50'}`}>
              <p className="text-sm text-[#a3a3a3] mb-3 font-ibm uppercase tracking-wider">TOTAL PNL</p>
              <p className={`text-3xl font-pixelify font-bold ${stats.totalPnL >= 0 ? 'text-[#00C950]' : 'text-[#FB2C36]'}`}>
                {formatLargeUSD(stats.totalPnL)}
              </p>
            </div>
            <div className="bg-[#1a1a1a] rounded-xl p-6 border border-[#FB2C36]/30 shadow-lg hover:shadow-xl transition-all hover:border-[#FB2C36]/50">
              <p className="text-sm text-[#a3a3a3] mb-3 font-ibm uppercase tracking-wider">CRITICAL</p>
              <div className="flex items-center gap-3">
                <Skull className="w-5 h-5 text-[#FB2C36]" />
                <p className="text-3xl font-pixelify font-bold text-[#FB2C36]">{stats.criticalCount}</p>
              </div>
            </div>
            <div className="bg-[#1a1a1a] rounded-xl p-6 border border-[#FE9A00]/30 shadow-lg hover:shadow-xl transition-all hover:border-[#FE9A00]/50">
              <p className="text-sm text-[#a3a3a3] mb-3 font-ibm uppercase tracking-wider">DANGER</p>
              <p className="text-3xl font-pixelify font-bold text-[#FE9A00]">{stats.dangerCount}</p>
            </div>
            <div className="bg-[#1a1a1a] rounded-xl p-6 border border-[#00C950]/30 shadow-lg hover:shadow-xl transition-all hover:border-[#00C950]/50">
              <p className="text-sm text-[#a3a3a3] mb-3 font-ibm uppercase tracking-wider">WINNING</p>
              <div className="flex items-center gap-3">
                <TrendingUp className="w-5 h-5 text-[#00C950]" />
                <p className="text-3xl font-pixelify font-bold text-[#00C950]">{stats.profitingCount}</p>
              </div>
            </div>
          </motion.div>
        )}

        {/* Filter Controls */}
        <div className="mb-8">
          <div className="bg-[#1a1a1a] border border-[#333] rounded-xl p-6 shadow-lg">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">

              {/* Left Side - Filters */}
              <div className="flex flex-col md:flex-row gap-6 flex-1">
                {/* Size Categories */}
                <div className="flex flex-col gap-3">
                  <span className="text-sm text-[#a3a3a3] font-ibm uppercase tracking-wider">Position Size</span>
                  <div className="flex flex-wrap gap-2">
                    <Button
                      onClick={() => selectedSizeCategory === 'whale' ? setSelectedSizeCategory('all') : setSelectedSizeCategory('whale')}
                      variant={selectedSizeCategory === 'whale' ? "default" : "outline"}
                      size="sm"
                      className={`rounded-lg px-4 py-2 font-ibm text-xs uppercase tracking-wide transition-all ${selectedSizeCategory === 'whale' ?
                        "bg-[#97FCE4] text-[#1D1D1D] border border-[#97FCE4] shadow-md" :
                        "bg-[#111] border border-[#444] text-gray-300 hover:bg-[#222] hover:border-[#555]"
                      }`}
                    >
                      üêã Whales &gt;$1M
                    </Button>
                    <Button
                      onClick={() => selectedSizeCategory === 'dolphin' ? setSelectedSizeCategory('all') : setSelectedSizeCategory('dolphin')}
                      variant={selectedSizeCategory === 'dolphin' ? "default" : "outline"}
                      size="sm"
                      className={`rounded-lg px-4 py-2 font-ibm text-xs uppercase tracking-wide transition-all ${selectedSizeCategory === 'dolphin' ?
                        "bg-[#97FCE4] text-[#1D1D1D] border border-[#97FCE4] shadow-md" :
                        "bg-[#111] border border-[#444] text-gray-300 hover:bg-[#222] hover:border-[#555]"
                      }`}
                    >
                      üê¨ Dolphins $100K-$1M
                    </Button>
                    <Button
                      onClick={() => selectedSizeCategory === 'shrimp' ? setSelectedSizeCategory('all') : setSelectedSizeCategory('shrimp')}
                      variant={selectedSizeCategory === 'shrimp' ? "default" : "outline"}
                      size="sm"
                      className={`rounded-lg px-4 py-2 font-ibm text-xs uppercase tracking-wide transition-all ${selectedSizeCategory === 'shrimp' ?
                        "bg-[#97FCE4] text-[#1D1D1D] border border-[#97FCE4] shadow-md" :
                        "bg-[#111] border border-[#444] text-gray-300 hover:bg-[#222] hover:border-[#555]"
                      }`}
                    >
                      ü¶ê Shrimps &lt;$100K
                    </Button>
                  </div>
                </div>

                {/* Risk Levels */}
                <div className="flex flex-col gap-3">
                  <span className="text-sm text-[#a3a3a3] font-ibm uppercase tracking-wider">Risk Level</span>
                  <div className="flex flex-wrap gap-2">
                    <Button
                      onClick={() => setSelectedRiskFilter(selectedRiskFilter === 'critical' ? null : 'critical')}
                      variant={selectedRiskFilter === 'critical' ? "destructive" : "outline"}
                      size="sm"
                      className={`rounded-lg px-4 py-2 font-ibm text-xs uppercase tracking-wide transition-all ${selectedRiskFilter === 'critical' ?
                        "bg-[#FB2C36] text-white border border-[#FB2C36] shadow-md" :
                        "bg-[#111] border border-[#FB2C36] text-[#FB2C36] hover:bg-[#FB2C36]/10"
                      }`}
                    >
                      <Skull className="w-3 h-3 mr-1" />
                      Critical &lt;5%
                    </Button>
                    <Button
                      onClick={() => setSelectedRiskFilter(selectedRiskFilter === 'danger' ? null : 'danger')}
                      variant={selectedRiskFilter === 'danger' ? "destructive" : "outline"}
                      size="sm"
                      className={`rounded-lg px-4 py-2 font-ibm text-xs uppercase tracking-wide transition-all ${selectedRiskFilter === 'danger' ?
                        "bg-[#FE9A00] text-white border border-[#FE9A00] shadow-md" :
                        "bg-[#111] border border-[#FE9A00] text-[#FE9A00] hover:bg-[#FE9A00]/10"
                      }`}
                    >
                      <AlertTriangle className="w-3 h-3 mr-1" />
                      Danger 5-10%
                    </Button>
                    <Button
                      onClick={() => setShowHighRiskOnly(!showHighRiskOnly)}
                      variant={showHighRiskOnly ? "destructive" : "outline"}
                      size="sm"
                      className={`rounded-lg px-4 py-2 font-ibm text-xs uppercase tracking-wide transition-all ${showHighRiskOnly ?
                        "bg-[#FB2C36] text-white border border-[#FB2C36] shadow-md" :
                        "bg-[#111] border border-[#444] text-gray-300 hover:bg-[#222] hover:border-[#555]"
                      }`}
                    >
                      <Flame className="w-3 h-3 mr-1" />
                      High Risk Only
                    </Button>
                  </div>
                </div>
              </div>

              {/* Right Side - Actions */}
              <div className="flex flex-col gap-3">
                <span className="text-sm text-[#a3a3a3] font-ibm uppercase tracking-wider">Actions</span>
                <div className="flex gap-2">
                  <Button
                    onClick={() => {
                      setSelectedRiskFilter(null);
                      setShowHighRiskOnly(false);
                      setSelectedSizeCategory('all');
                    }}
                    variant="outline"
                    size="sm"
                    className="bg-[#111] border border-[#444] text-gray-300 hover:bg-[#222] hover:border-[#555] rounded-lg px-4 py-2 font-ibm text-xs uppercase tracking-wide transition-all"
                  >
                    Clear All
                  </Button>
                  <Button
                    onClick={handleRefresh}
                    disabled={isManualRefreshing}
                    size="sm"
                    className="bg-[#97FCE4] text-[#1D1D1D] border border-[#97FCE4] rounded-lg px-4 py-2 font-ibm text-xs uppercase tracking-wide shadow-md hover:bg-[#7EDDC4] transition-all"
                  >
                    <RefreshCw className={`w-3 h-3 mr-1 ${isManualRefreshing ? 'animate-spin' : ''}`} />
                    Refresh
                  </Button>
                </div>
              </div>
            </div>

            {/* Active Filters Display */}
            {(selectedSizeCategory !== 'all' || selectedRiskFilter || showHighRiskOnly) && (
              <div className="mt-4 pt-4 border-t border-[#333]">
                <div className="flex flex-wrap items-center gap-2">
                  <span className="text-xs text-[#a3a3a3] font-ibm">Active filters:</span>
                  {selectedSizeCategory !== 'all' && (
                    <span className="inline-flex items-center px-2 py-1 rounded-md bg-[#97FCE4]/10 border border-[#97FCE4]/30 text-[#97FCE4] text-xs font-ibm">
                      {selectedSizeCategory}
                      <button
                        onClick={() => setSelectedSizeCategory('all')}
                        className="ml-1 hover:text-white transition-colors"
                      >
                        √ó
                      </button>
                    </span>
                  )}
                  {selectedRiskFilter && (
                    <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-ibm ${
                      selectedRiskFilter === 'critical'
                        ? 'bg-[#FB2C36]/10 border border-[#FB2C36]/30 text-[#FB2C36]'
                        : 'bg-[#FE9A00]/10 border border-[#FE9A00]/30 text-[#FE9A00]'
                    }`}>
                      {selectedRiskFilter}
                      <button
                        onClick={() => setSelectedRiskFilter(null)}
                        className="ml-1 hover:text-white transition-colors"
                      >
                        √ó
                      </button>
                    </span>
                  )}
                  {showHighRiskOnly && (
                    <span className="inline-flex items-center px-2 py-1 rounded-md bg-[#FB2C36]/10 border border-[#FB2C36]/30 text-[#FB2C36] text-xs font-ibm">
                      High Risk Only
                      <button
                        onClick={() => setShowHighRiskOnly(false)}
                        className="ml-1 hover:text-white transition-colors"
                      >
                        √ó
                      </button>
                    </span>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Main Content */}
        {isLoading ? (
          <div className="flex items-center justify-center py-20">
            <div className="text-center">
              <Loader2 className="w-16 h-16 animate-spin text-[#97FCE4] mx-auto mb-4" />
              <p className="text-gray-400">Loading positions...</p>
            </div>
          </div>
        ) : error ? (
          <div className="flex flex-col items-center justify-center py-20">
            <p className="text-[#FB2C36] font-medium mb-4">Failed to load positions</p>
            <Button onClick={handleRefresh} className="bg-[#FB2C36] hover:bg-[#E02833] text-white">
              Retry
            </Button>
          </div>
        ) : positions.length === 0 ? (
          <div className="text-center py-20">
            <p className="text-gray-400 text-lg">No positions found</p>
          </div>
        ) : (
          <>
            {/* Desktop Table View */}
            <div className="hidden lg:block">
              <div className="bg-[#0f0f0f] border border-[#333] rounded-xl overflow-hidden shadow-xl">
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="border-b border-[#333]">
                      <tr>
                        <th className="text-left p-4 text-sm font-ibm text-[#a3a3a3] uppercase tracking-wider">TRADER</th>
                        <th className="text-left p-4 text-sm font-ibm text-[#a3a3a3] uppercase tracking-wider">ASSET</th>
                        <th className="text-right p-4 text-sm font-ibm text-[#a3a3a3] uppercase tracking-wider">POSITION VALUE</th>
                        <th className="text-right p-4 text-sm font-ibm text-[#a3a3a3] uppercase tracking-wider">UNREALIZED PNL</th>
                        <th className="text-right p-4 text-sm font-ibm text-[#a3a3a3] uppercase tracking-wider">LIQ DISTANCE</th>
                        <th className="text-center p-4 text-sm font-ibm text-[#a3a3a3] uppercase tracking-wider">RISK</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-[#333]">
                      {positions
                        .sort((a, b) => {
                          const riskOrder = { critical: 0, danger: 1, warning: 2, safe: 3 };
                          const aRisk = riskOrder[a.riskLevel as keyof typeof riskOrder] ?? 4;
                          const bRisk = riskOrder[b.riskLevel as keyof typeof riskOrder] ?? 4;
                          if (aRisk !== bRisk) return aRisk - bRisk;
                          return (a.liquidationDistance || 100) - (b.liquidationDistance || 100);
                        })
                        .map((position, index) => {
                          const isProfiting = position.unrealizedPnl > 0;
                          const getRiskColor = (riskLevel?: string) => {
                            switch (riskLevel) {
                              case 'critical': return 'text-[#FB2C36]';
                              case 'danger': return 'text-[#FE9A00]';
                              case 'warning': return 'text-[#FE9A00]';
                              default: return 'text-gray-300';
                            }
                          };

                          return (
                            <motion.tr
                              key={`${position.address}-${position.coin}`}
                              initial={{ opacity: 0, y: 10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ duration: 0.2, delay: index * 0.02 }}
                              className="hover:bg-[#1a1a1a] transition-all"
                            >
                              <td className="p-4">
                                <div className="flex items-center gap-4">
                                  {/* Avatar Circle */}
                                  <div className="w-10 h-10 bg-gradient-to-br from-[#97FCE4] to-[#7EDDC4] rounded-lg flex items-center justify-center flex-shrink-0">
                                    <span className="text-[#1D1D1D] font-pixelify font-bold text-sm">
                                      {position.entityName.slice(0, 2).toUpperCase()}
                                    </span>
                                  </div>

                                  <div className="flex flex-col min-w-0">
                                    {position.twitter ? (
                                      <a
                                        href={position.twitter}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        className="font-ibm text-white hover:text-[#97FCE4] transition-colors truncate text-sm"
                                      >
                                        {position.entityName}
                                      </a>
                                    ) : (
                                      <span className="font-ibm text-white truncate text-sm">{position.entityName}</span>
                                    )}
                                    <a
                                      href={`https://hyperdash.info/trader/${position.address}`}
                                      target="_blank"
                                      rel="noopener noreferrer"
                                      className="text-xs text-[#a3a3a3] hover:text-[#97FCE4] font-ibm"
                                    >
                                      {position.address.slice(2, 8)}...
                                    </a>
                                  </div>
                                </div>
                              </td>
                              <td className="p-4">
                                <span className={`inline-flex px-2 py-1 text-xs font-ibm ${
                                  isProfiting ? 'text-[#00C950]' : 'text-[#FB2C36]'
                                }`}>
                                  {position.coin}
                                </span>
                              </td>
                              <td className="p-5 text-right">
                                <span className="font-ibm text-white text-sm">{formatLargeUSD(position.positionValue)}</span>
                              </td>
                              <td className="p-5 text-right">
                                <div className="flex items-center justify-end gap-2">
                                  {isProfiting ? (
                                    <TrendingUp className="w-5 h-5 text-[#00C950]" />
                                  ) : (
                                    <TrendingDown className="w-5 h-5 text-[#FB2C36]" />
                                  )}
                                  <span className={`font-ibm text-sm ${isProfiting ? 'text-[#00C950]' : 'text-[#FB2C36]'}`}>
                                    {formatLargeUSD(position.unrealizedPnl)}
                                  </span>
                                </div>
                              </td>
                              <td className="p-5 text-right">
                                <span className={`font-ibm text-sm ${getRiskColor(position.riskLevel)}`}>
                                  {position.liquidationDistance?.toFixed(2) ?? 'N/A'}%
                                </span>
                              </td>
                              <td className="p-5 text-center">
                                <div className="flex items-center justify-center gap-2">
                                  {position.riskLevel === 'critical' && <Skull className="w-5 h-5 text-[#FB2C36]" />}
                                  {position.riskLevel === 'danger' && <Flame className="w-5 h-5 text-[#FE9A00]" />}
                                  {position.riskLevel === 'warning' && <AlertTriangle className="w-5 h-5 text-[#FE9A00]" />}
                                  <span className={`text-xs font-ibm uppercase ${getRiskColor(position.riskLevel)}`}>
                                    {position.riskLevel || 'safe'}
                                  </span>
                                </div>
                              </td>
                            </motion.tr>
                          );
                        })}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            {/* Mobile Card View */}
            <div className="block lg:hidden grid grid-cols-1 md:grid-cols-2 gap-4">
              {positions
                .sort((a, b) => {
                  const riskOrder = { critical: 0, danger: 1, warning: 2, safe: 3 };
                  const aRisk = riskOrder[a.riskLevel as keyof typeof riskOrder] ?? 4;
                  const bRisk = riskOrder[b.riskLevel as keyof typeof riskOrder] ?? 4;
                  if (aRisk !== bRisk) return aRisk - bRisk;
                  return (a.liquidationDistance || 100) - (b.liquidationDistance || 100);
                })
                .map((position, index) => (
                  <FunkyPositionCard key={`${position.address}-${position.coin}`} position={position} index={index} />
                ))}
            </div>
          </>
        )}
      </div>
    </main>
  );
}